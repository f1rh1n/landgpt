# run_landgpt.py - Simple script to run LandGPT Phase 1

import os
import sys
import subprocess

def install_requirements():
    """Install required packages"""
    print("üì¶ Installing required packages...")
    packages = [
        "requests", "beautifulsoup4", "pandas", "numpy",
        "selenium", "webdriver-manager", "loguru", "fake-useragent"
    ]

    for package in packages:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
            print(f"‚úÖ {package} installed")
        except subprocess.CalledProcessError:
            print(f"‚ùå Failed to install {package}")

def check_files():
    """Check if required files exist"""
    required_files = ["database_setup.py", "phase1_demo.py"]
    missing_files = []

    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)

    if missing_files:
        print("‚ùå Missing required files:")
        for file in missing_files:
            print(f"   - {file}")
        print("\nüí° Please copy the code from the artifacts into these files")
        return False

    print("‚úÖ All required files found")
    return True

def setup_database():
    """Run database setup"""
    print("\nüóÑÔ∏è Setting up database...")
    try:
        import database_setup
        print("‚úÖ Database setup completed")
        return True
    except Exception as e:
        print(f"‚ùå Database setup failed: {e}")
        return False

def run_demo():
    """Run the demo"""
    print("\nüé¨ Running demo...")
    try:
        import phase1_demo
        demo = phase1_demo.LandGPTPhase1Demo()
        demo.run_complete_demo()
        return True
    except Exception as e:
        print(f"‚ùå Demo failed: {e}")
        return False

def interactive_query():
    """Simple interactive query system"""
    import sqlite3
    import pandas as pd

    print("\nüí¨ LandGPT Interactive Query System")
    print("Enter 'quit' to exit")

    conn = sqlite3.connect("landgpt.db")

    while True:
        user_input = input("\nüó£Ô∏è Ask about land records: ").strip()

        if user_input.lower() in ['quit', 'exit', 'q']:
            break

        # Simple keyword-based responses
        if any(word in user_input.lower() for word in ['agra', '‡§Ü‡§ó‡§∞‡§æ']):
            df = pd.read_sql_query(
                "SELECT COUNT(*) as count, AVG(area_hectare) as avg_area FROM land_records WHERE district LIKE '%Agra%'",
                conn
            )
            if not df.empty and df.iloc[0]['count'] > 0:
                count = df.iloc[0]['count']
                avg_area = df.iloc[0]['avg_area'] or 0
                print(f"ü§ñ ‡§Ü‡§ó‡§∞‡§æ ‡§Æ‡•á‡§Ç {count} ‡§≠‡•Ç‡§Æ‡§ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§π‡•à‡§Ç, ‡§î‡§∏‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤ {avg_area:.2f} ‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞")
            else:
                print("ü§ñ ‡§Ü‡§ó‡§∞‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ")

        elif any(word in user_input.lower() for word in ['mutation', '‡§Æ‡•ç‡§Ø‡•Ç‡§ü‡•á‡§∂‡§®']):
            df = pd.read_sql_query(
                "SELECT answer FROM legal_faqs WHERE tags LIKE '%mutation%' LIMIT 1",
                conn
            )
            if not df.empty:
                print(f"ü§ñ {df.iloc[0]['answer']}")
            else:
                print("ü§ñ ‡§Æ‡•ç‡§Ø‡•Ç‡§ü‡•á‡§∂‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä: ‡§Ø‡§π ‡§≠‡•Ç‡§Æ‡§ø ‡§∏‡•ç‡§µ‡§æ‡§Æ‡§ø‡§§‡•ç‡§µ ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§π‡•à")

        elif any(word in user_input.lower() for word in ['khasra', '‡§ñ‡§∏‡§∞‡§æ']):
            print("ü§ñ ‡§ñ‡§∏‡§∞‡§æ ‡§®‡§Ç‡§¨‡§∞: ‡§≠‡•Ç‡§Æ‡§ø ‡§ï‡•á ‡§ü‡•Å‡§ï‡§°‡§º‡•á ‡§ï‡•Ä ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡§π‡§ö‡§æ‡§® ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§ú‡§Æ‡•Ä‡§® ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§")

        elif any(word in user_input.lower() for word in ['registry', '‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä']):
            print("ü§ñ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú: ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§™‡§§‡•ç‡§∞, ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú, ‡§ñ‡§∏‡§∞‡§æ/‡§ñ‡§§‡•å‡§®‡•Ä, ‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°, PAN ‡§ï‡§æ‡§∞‡•ç‡§°")

        elif any(word in user_input.lower() for word in ['help', '‡§Æ‡§¶‡§¶']):
            print("ü§ñ ‡§Æ‡•à‡§Ç ‡§®‡§ø‡§Æ‡•ç‡§® ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:")
            print("   ‚Ä¢ ‡§≠‡•Ç‡§Æ‡§ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ñ‡•ã‡§ú‡§®‡§æ")
            print("   ‚Ä¢ ‡§Æ‡•ç‡§Ø‡•Ç‡§ü‡•á‡§∂‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ")
            print("   ‚Ä¢ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä")
            print("   ‚Ä¢ ‡§ñ‡§∏‡§∞‡§æ ‡§®‡§Ç‡§¨‡§∞ ‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ")

        else:
            print("ü§ñ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡•Ç‡§Æ‡§ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§")

    conn.close()
    print("üëã ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!")

def main_menu():
    """Main menu for LandGPT"""
    print("üåæ LandGPT - AI Legal Assistant for Land Records")
    print("=" * 50)

    while True:
        print("\nüìã Main Menu:")
        print("1. üöÄ Quick Setup (Install + Database + Demo)")
        print("2. üóÑÔ∏è Setup Database Only")
        print("3. üé¨ Run Demo")
        print("4. üí¨ Interactive Query")
        print("5. üìä View Database Stats")
        print("6. üö™ Exit")

        choice = input("\nSelect option (1-6): ").strip()

        if choice == '1':
            print("\nüöÄ Running Quick Setup...")
            install_requirements()
            if check_files() and setup_database():
                run_demo()
                print("\n‚úÖ Quick setup completed!")

        elif choice == '2':
            if check_files():
                setup_database()

        elif choice == '3':
            if os.path.exists("landgpt.db"):
                run_demo()
            else:
                print("‚ùå Database not found. Please run setup first.")

        elif choice == '4':
            if os.path.exists("landgpt.db"):
                interactive_query()
            else:
                print("‚ùå Database not found. Please run setup first.")

        elif choice == '5':
            if os.path.exists("landgpt.db"):
                show_database_stats()
            else:
                print("‚ùå Database not found. Please run setup first.")

        elif choice == '6':
            print("üëã Thank you for using LandGPT!")
            break

        else:
            print("‚ùå Invalid option. Please choose 1-6.")

def show_database_stats():
    """Show database statistics"""
    import sqlite3
    import pandas as pd

    print("\nüìä Database Statistics:")
    print("-" * 30)

    conn = sqlite3.connect("landgpt.db")

    # Count records
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM land_records")
    land_count = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM legal_faqs")
    faq_count = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(DISTINCT district) FROM land_records")
    district_count = cursor.fetchone()[0]

    print(f"üìÑ Land Records: {land_count}")
    print(f"‚ùì Legal FAQs: {faq_count}")
    print(f"üèôÔ∏è Districts: {district_count}")

    # Show sample records
    if land_count > 0:
        print(f"\nüìù Sample Records:")
        df = pd.read_sql_query("SELECT district, village, owner_name, khasra_number FROM land_records LIMIT 3", conn)
        for _, row in df.iterrows():
            print(f"   ‚Ä¢ {row['district']} - {row['village']} - Khasra {row['khasra_number']}")

    conn.close()

if __name__ == "__main__":
    main_menu()